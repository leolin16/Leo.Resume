// <auto-generated />
using System;
using Leo.ResumeProfile.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Leo.ResumeProfile.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191117033453_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Leo.ResumeProfile.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertOrganizationNameChn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertOrganizationNameEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertOrganizationNameJpn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignationDegreeChn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignationDegreeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignationDegreeJpn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ObtainedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<string>("StudyWorkContentDescChn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyWorkContentDescEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyWorkContentDescJpn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("DesignationDegreeChn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignationDegreeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignationDegreeJpn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DurationInYear")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StudyWorkPlaceNameChn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyWorkPlaceNameEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyWorkPlaceNameJpn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyWorkRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("UserId");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.ExperienceSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentChn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentJpn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("UserId");

                    b.ToTable("ExperienceSummary");
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.ProjectDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Client")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectDescriptionChn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectDescriptionEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectDescriptionJpn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectObjectiveChn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectObjectiveEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectObjectiveJpn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleAndResponsibilityChn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleAndResponsibilityEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleAndResponsibilityJpn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleNameChn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleNameEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleNameJpn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillsId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TeamSize")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tools")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SkillsId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectDetail");
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.Resume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<Guid>("ResumeUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ResumeUserId");

                    b.ToTable("Resumes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b1c2b4d-48c7-402a-80c3-cc796ad49c6b"),
                            Description = "Commandeering a ship in rough waters isn't easy.  Commandeering it without getting caught is even harder.  In this course you'll learn how to sail away and avoid those pesky musketeers.",
                            ResumeUserId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            Title = "Commandeering a Ship Without Getting Caught"
                        },
                        new
                        {
                            Id = new Guid("d8663e5e-7494-4f81-8739-6e0de1bea7ee"),
                            Description = "In this course, the ResumeUser provides tips to avoid, or, if needed, overthrow pirate mutiny.",
                            ResumeUserId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            Title = "Overthrowing Mutiny"
                        },
                        new
                        {
                            Id = new Guid("d173e20d-159e-4127-9ce9-b0ac2564ad97"),
                            Description = "Every good pirate loves rum, but it also has a tendency to get you into trouble.  In this course you'll learn how to avoid that.  This new exclusive edition includes an additional chapter on how to run fast without falling while drunk.",
                            ResumeUserId = new Guid("da2fd609-d754-4feb-8acd-c4f9ff13ba96"),
                            Title = "Avoiding Brawls While Drinking as Much Rum as You Desire"
                        },
                        new
                        {
                            Id = new Guid("40ff5488-fdab-45b5-bc3a-14302d59869a"),
                            Description = "In this course you'll learn how to sing all-time favourite pirate songs without sounding like you actually know the words or how to hold a note.",
                            ResumeUserId = new Guid("2902b665-1190-4c70-9915-b9c2d7680450"),
                            Title = "Singalong Pirate Hits"
                        });
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.ResumeUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CharactersCHN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CharactersENG")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CharactersJPN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email3rd")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmailPri")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HomeAddressCHN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HomeAddressENG")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HomeAddressJPN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImageLifeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImagePortraitName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameChn")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameEng")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameJpn")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Passport")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WorkHabbitsCHN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WorkHabbitsENG")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WorkHabbitsJPN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ResumeUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1650, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 5, 0, 0)),
                            Gender = 0,
                            MaritalStatus = 0,
                            MobileNo = "Ships",
                            NameChn = "林佳伟",
                            NameEng = "Leo Lin",
                            NameJpn = "林佳偉",
                            Passport = "Berry",
                            PlaceOfBirth = "Griffin Beak Eldritch"
                        },
                        new
                        {
                            Id = new Guid("da2fd609-d754-4feb-8acd-c4f9ff13ba96"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1668, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 5, 0, 0)),
                            Gender = 0,
                            MaritalStatus = 0,
                            MobileNo = "Rum",
                            NameChn = "林佳伟2",
                            NameEng = "Leo Lin2",
                            NameJpn = "林佳偉2",
                            Passport = "Nancy",
                            PlaceOfBirth = "Swashbuckler Rye"
                        },
                        new
                        {
                            Id = new Guid("2902b665-1190-4c70-9915-b9c2d7680450"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1701, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 5, 0, 0)),
                            Gender = 0,
                            MaritalStatus = 0,
                            MobileNo = "Singing",
                            NameChn = "林佳伟3",
                            NameEng = "Leo Lin3",
                            NameJpn = "林佳偉3",
                            Passport = "Eli",
                            PlaceOfBirth = "Ivory Bones Sweet"
                        },
                        new
                        {
                            Id = new Guid("102b566b-ba1f-404c-b2df-e2cde39ade09"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1702, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 5, 0, 0)),
                            Gender = 0,
                            MaritalStatus = 0,
                            MobileNo = "Singing",
                            NameChn = "林佳伟4",
                            NameEng = "Leo Lin4",
                            NameJpn = "林佳偉4",
                            Passport = "Arnold",
                            PlaceOfBirth = "The Unseen Stafford"
                        },
                        new
                        {
                            Id = new Guid("5b3621c0-7b12-4e80-9c8b-3398cba7ee05"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1690, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 5, 0, 0)),
                            Gender = 0,
                            MaritalStatus = 0,
                            MobileNo = "Maps",
                            NameChn = "林佳伟5",
                            NameEng = "Leo Lin5",
                            NameJpn = "林佳偉5",
                            Passport = "Seabury",
                            PlaceOfBirth = "Toxic Reyson"
                        },
                        new
                        {
                            Id = new Guid("2aadd2df-7caf-45ab-9355-7f6332985a87"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1723, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 5, 0, 0)),
                            Gender = 0,
                            MaritalStatus = 0,
                            MobileNo = "General debauchery",
                            NameChn = "林佳伟6",
                            NameEng = "Leo Lin6",
                            NameJpn = "林佳偉6",
                            Passport = "Rutherford",
                            PlaceOfBirth = "Fearless Cloven"
                        },
                        new
                        {
                            Id = new Guid("2ee49fe3-edf2-4f91-8409-3eb25ce6ca51"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1721, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 5, 0, 0)),
                            Gender = 0,
                            MaritalStatus = 0,
                            MobileNo = "Rum",
                            NameChn = "林佳伟7",
                            NameEng = "Leo Lin7",
                            NameJpn = "林佳偉7",
                            Passport = "Atherton",
                            PlaceOfBirth = "Crow Ridley"
                        });
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("DurationHandWrite")
                        .HasColumnType("real");

                    b.Property<string>("ExperienceDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("PersonalFocusPriority")
                        .HasColumnType("int");

                    b.Property<Guid?>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TargetDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("UserId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.URL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<string>("UrlAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("URL");
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.Certificate", b =>
                {
                    b.HasOne("Leo.ResumeProfile.Entities.Skill", null)
                        .WithMany("Certificates")
                        .HasForeignKey("SkillId");

                    b.HasOne("Leo.ResumeProfile.Entities.ResumeUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.Experience", b =>
                {
                    b.HasOne("Leo.ResumeProfile.Entities.Resume", null)
                        .WithMany("Experiences")
                        .HasForeignKey("ResumeId");

                    b.HasOne("Leo.ResumeProfile.Entities.ResumeUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.ExperienceSummary", b =>
                {
                    b.HasOne("Leo.ResumeProfile.Entities.Resume", null)
                        .WithMany("ExperienceSummaries")
                        .HasForeignKey("ResumeId");

                    b.HasOne("Leo.ResumeProfile.Entities.ResumeUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.ProjectDetail", b =>
                {
                    b.HasOne("Leo.ResumeProfile.Entities.Resume", null)
                        .WithMany("DetailedProjectExperiences")
                        .HasForeignKey("ResumeId");

                    b.HasOne("Leo.ResumeProfile.Entities.Skill", "Skills")
                        .WithMany()
                        .HasForeignKey("SkillsId");

                    b.HasOne("Leo.ResumeProfile.Entities.ResumeUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.Resume", b =>
                {
                    b.HasOne("Leo.ResumeProfile.Entities.ResumeUser", "ResumeUser")
                        .WithMany("Resumes")
                        .HasForeignKey("ResumeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.Skill", b =>
                {
                    b.HasOne("Leo.ResumeProfile.Entities.Resume", null)
                        .WithMany("Skills")
                        .HasForeignKey("ResumeId");

                    b.HasOne("Leo.ResumeProfile.Entities.ResumeUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Leo.ResumeProfile.Entities.URL", b =>
                {
                    b.HasOne("Leo.ResumeProfile.Entities.Skill", null)
                        .WithMany("URLs")
                        .HasForeignKey("SkillId");
                });
#pragma warning restore 612, 618
        }
    }
}
